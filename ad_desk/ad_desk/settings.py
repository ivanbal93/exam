"""
Django settings for ad_desk project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pmy+dj$pl2%ty6siv-e%@vqic!dd00magxt06-t&b5qz+%p5cc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'app',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'protect'
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
]

ROOT_URLCONF = 'ad_desk.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ad_desk.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_URL = '/accounts/login'
LOGIN_REDIRECT_URL = '/'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'

DEFAULT_FROM_EMAIL = 'intpy9@yandex.ru'

EMAIL_HOST = 'smtp.yandex.ru'  
EMAIL_PORT = 465  
EMAIL_HOST_USER = 'intpy9' 
EMAIL_HOST_PASSWORD = 'njmggnzfinbcqfil'  # пароль от приложения, а не от почты
EMAIL_USE_SSL = True  

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / "static"]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'style': '{',
    'formatters': {
        'debug': {
            'format': '%(asctime)s %(levelname)s %(message)s'  #  формат вывода в консоль сообщений 'debug'
        },
        'warning': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s'  #  формат вывода в консоль сообщений 'warning'
        },
        'error': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s'  #  формат вывода в консоль сообщений 'error'
        },
        'error_email': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s'  #  формат отправки на почту сообщений 'error'
        },
        'info': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s'  #  формат вывода в консоль сообщений 'info'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'  # фильтр используется для отправки сообщение на почту админам + заполнение файла 'general.log'
        }
    },
    'handlers': {
        'console_debug': 
        {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'rich.logging.RichHandler',  #  пакет 'rich' для выделения цветом сообщений в консоли
            'formatter': 'debug'
        },
        'console_warning':
        {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'rich.logging.RichHandler',  #  пакет 'rich' для выделения цветом сообщений в консоли
            'formatter': 'warning'
        },
        'console_error': 
        {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'rich.logging.RichHandler',  #  пакет 'rich' для выделения цветом сообщений в консоли
            'formatter': 'error'
        },
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'filters': ['require_debug_false'],
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'formatter': 'error_email'
        # },
        # 'file_general_log': {
        #     'level': 'INFO',
        #     'filters': ['require_debug_false'],
        #     'class': 'logging.FileHandler',
        #     'formatter': 'info',
        #     'filename': 'general.log'
        # },
        # 'file_errors_log': {
        #     'level': 'ERROR',
        #     'filters': ['require_debug_true'],
        #     'class': 'logging.FileHandler',
        #     'formatter': 'error',
        #     'filename': 'error.log'
        # },
        # 'file_security_log': {
        #     'filters': ['require_debug_true'],
        #     'class': 'logging.FileHandler',
        #     'formatter': 'info',
        #     'filename': 'security.log'
        # }
    },
    'loggers': {
        'django': {
            'handlers': ['console_debug'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console_error',],
            'propagate': True,
            'level': 'ERROR'
        },
        'django.server': {
            'handlers': ['console_error',],
            'propagate': True,
            'level': 'ERROR'
        },
        'django.template': {
            'handlers': ['console_error',],
            'propagate': True,
            'level': 'ERROR'
        },
        'django.db.backends': {
            'handlers': ['console_error',],
            'propagate': True,
            'level': 'ERROR'
        },
        'django.security': {
            'handlers': ['console_error',],
            'propagate': True,
            'level': 'ERROR'
        }
    }
}